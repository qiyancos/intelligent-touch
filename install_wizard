#! /bin/bash
root=`dirname $0`
#Default Installation Path
installPath=(`cat /etc/passwd | grep "${USER}:" | sed 's/:/ /g'`) 
installPath=${installPath[5]}/.Remote_Checker
dateTag=`date | base64`
cd $root
root=$PWD
checkRun "chmod +x $root/lib/echo_color"
source $root/lib/echo_color apply_scheme

abandon(){
	$WARN; echo " Install Wizard exiting due to the problem listed below:"
	$HIGHLIGHT $*
	$TITLE  "======================Installation Stopped!======================"
	exit
}

checkRun(){
	$*
	errCode=$?
	if [ $errCode != 0 ]
	then 
		$ERROR; echo " Error(s) occurred while executing the command line listed below:"
		$HIGHLIGHT "\"$*\""
		echo "Returned with error code ($errCode)"
		exit
	fi
}

$TITLE	"================================================================="
$WARNT	"        Author: Rock Lee. All rights reserved by Rock Lee!       "
$TITLE	"================================================================="
$WARNT	"        >>>> Welcom to Remote Checker Install Wizard! <<<<       "
$WARNT	"  Please follow the guide to finish Remote Checker installation! "

# Start File Checking
$RUNMSG ">> Checking Local Files"
if [ -s $root/config/vsftpd -a -s $root/config/vsftpd.conf -a \
        -s $root/config/s-nail.rc ] #-a TODO ]
then echo "Source file packages is intact, good to go!"
else abandon "Source file package is not intact!"
fi
$RUNMSG ">> Local Files Check Passed!"

# Install Software
$RUNMSG	">> Initiating Environment"
checkRun "sudo apt-get update"
checkRun "sudo apt-get upgrade"
checkRun "sudo apt-get install git db-util"
checkRun "sudo apt-get install gcc-5-multilib g++-5-multilib"
checkRun "sudo apt-get install android-tools-adb libpng12-dev libjpeg62-dev"
checkRun "sudo apt-get install libtiff5-dev tesseract-ocr"
checkRun "sudo apt-get install tesseract-ocr-eng imagemagick"
echo -n "Would you like to use the default installation path [$installPath]? [Y/N]"
read flag
if [[ ! ${flag}x =~ ^(Yx|yx|x)$ ]]
then 
	while [ 1 ]
	do 
		echo "Please ENTER the new FULL path where Remote Checker should be installed:  "
		read installPath
		echo -n "Install Remote Checker to [$installPath]? [Y/N]"
		read flag
		if [ ${flag}x = Yx -o ${flag}x = yx -o ${flag}x = x ]
		then break
		fi
	done 
fi
$WARN; echo " Remote Checker will be installed to [$installPath]!"

checkRun "mkdir -p $installPath"
checkRun "mkdir -p $installPath/backup"
checkRun "mkdir -p $installPath/config"
$RUNMSG	">> Environment Initiation Successful!"

$RUNMSG	">> Initiate Auto-Mail System"
checkRun "sudo apt-get install sendmail"
checkRun "sudo apt-get install heirloom-mailx"

$WARN; echo   " Following processes will change your current heirloom-mailx config file! Old config file will be saved to [$installPath/backup/$dateTag]" 
if [ -f /etc/s-nail.rc ]
then checkRun "cp /etc/s-nail.rc $installPath/backup/$dateTag/"
fi
checkRun "sudo cp $root/config/s-nail.rc /etc/s-nail.rc"

mailRunning=`checkRun "sudo netstat -antup | grep sendemail"`
if [ "${mailRunning}x" = x ]
then
	$ERROR; echo " Problem encountered with sendmail installation!"
	exit
fi

while [ 1 ]
do
	echo "Please ENTER your email address (Only *@pku.edu.cn is supported!):"
	read emailAddr
	postfix=(`echo $emailAddr | sed 's/@/ /g'`)
	if [ ${postfix[1]}x != "pku.edu.cnx" ]
	then $WARN; echo " Bad email address!"
	else break
	fi
done 
sudo sed -i "s/EMAIL/$emailAddr/g" /etc/s-nail.rc
while [ 1 ]
do
	echo -n "Please ENTER your password for $emailAddr:"
	read -s password_test; echo
	echo -n "Please RETYPE to configure your password:"
	read -s password; echo
	if [ ${password_test}x != ${password}x ]
	then
		$WARN; echo " Passwords mismatch!"
		continue
	fi
	if [ ${password}x = x ]
	then $WARN; echo " Password should not be empty!"
	else break
	fi
done
sudo sed -i "s/PASSWORD/$password/g" /etc/s-nail.rc
$RUNMSG ">> Restarting sendmail..."
checkRun "sudo service sendmail restart"
mailRunning=`checkRun "sudo netstat -antup | grep sendemail"`
if [ "${mailRunning}x" = x ]
then
    $ERROR; echo " Problem encountered while trying to restart sendmail!"
    exit
fi
$RUNMSG ">> Auto-Mail System Initiation Completed!"

$RUNMSG ">> Copy Files and Build Simulator Required for Remote Checker"
# Copy Files
checkRun "mkdir -p $installPath/lib"
#TODO
$RUNMSG ">> Files Copy Completed!"

$RUNMSG ">> Setup Email Used for Notification"
while [ 1 ]
do
	echo "Please ENTER the email address you would like use to remote controller:"
	read notifyAddr
	if [ ${notifyAddr}x = x ]
	then $WARN; echo " Email Address must not be empty"
	else
		verifyCode=`echo $[(RANDOM % 100) * 90 / 100 + 10] | base64`
		echo -e "    Welcom to Remote Checker! \n    Your verification code is [$verifyCode]! \n    This email is only used for test and verification. If you have recieved this email, that means your auto-mail-sending system works well!" | mail -s "Remote Checker Verification Email" $notifyAddr
		if [ $? != 0 ]
		then abandon "Verification email send failed!"
		fi
		$WARN; echo    "An email has been sent to $notifyAddr for test and verification! Please make sure that you have recieved it so that you can ENTER the verification code in your email (The verification code is case-sensitive and you may ENTER [N/n] to quit):"
		while [ 1 ]
		do
		    read flag
		    if [[ ${flag}x =~ ^(Nx|nx)$ ]]
		    then abandon "Auto-Mail-Sending system check failed!"
		    elif [ ${flag}x != ${verifyCode}x ]
		    then
		        echo $WARN; echo " Verification Codes Mismatch!"
		        echo -n "Please RETYPE the verification code:"
		    else break
		    fi
		done
		break
	fi
done

sudo sed -i "s%NOTIFYADDR%$notifyAddr%g" /bin/remote_checker $installPath/scripts/*
$RUNMSG ">> Email Used for Notification Setup Completed!"

$TITLE	"====================Installation Complete!======================="
echo "You may use \"lsusb\" to check if your phone has been normally connected! (There should be one line, which looks like \"Bus 001 Devices 056: ID 2717:0368\".)"
echo
echo "Before we can use the adb tools, some more steps need to be done!"
echo -n "You may check the link showed below to know the steps: "
$RUNMSG "http://blog.csdn.net/loushuai/article/details/45565951"
