#! /bin/bash
if [ x$_SHIMPORT_ = x ]
then
	echo "Error: Can not run without shimport!"
	exit 1
fi
shimport color_scheme.shh
shimport basic_func.shh

__LkeyNameList=("Unknown" "Unknown" "SoftRight" "Home" "Back" "Call" "EndCall"
        "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "Star" "Pound" "DpadUp" "DpadDown"
        "DpadLeft" "DpadRight" "DpadCenter" "VolUp" "VolDown" "Power" "Camera"
        "Clear" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P"
        "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "Comma" "Period" "LeftAlt" "RightAlt"
        "LeftShift" "RightShift" "Tab" "Space" "Sym" "Explorer" "Envelope" "Enter"
        "Del" "Grave" "Minus" "Equals" "LeftBracket" "RightBracket" "BackSlash"
        "Semicolon" "Apostrophe" "Slash" "At" "Num" "HeadsetHook" "Focus" "Plus"
        "Menu" "Notification" "Search" "KeyCode" "PageUp" "PageDown" "Esc" 
        "ForwardDelete" "CapsLock" "ScrollLock" "Break" "MoveHome" "MoveEnd" 
        "Insert" "NumLock" "Mute" "ZoomIn" "ZomOut")

__LkeyValList=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
               20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36
               37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53
               54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70
               71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 92 93
               111 112 115 116 121 122 123 124 143 164 168 169)

__LkeyEventNameList=("Menu" "Home" "Back" "Power" "VolUp" "VolDown")
__LkeyEventValList=(139 102 158 116 115 114)
__LkeyEventIDList=(2 5 2 0 5 0)
# The settings above can be different between two different devices

__Ghelp(){
	ERROR "Help function not impelmented yet!"
}

__GadbInitServer(){
	setArgs $*
	checkArgs '$# = 0' "Too many arguments"
    RUNMSGL ">> Starting ADB Server..."
    # restart adb server
    checkRun "sudo adb kill-server"
    checkRun "sudo adb start-server"
	__LserverReady=1
}

__GadbInitDevice(){
	setArgs $*
	checkArgs '$# = 0' "Too many arguments"
    unset __LdeviceID
	if [ x$__LserverReady != x1 ]
	then
		WARN "Can not init device with no server initiated!"
		__GadbInitServer
	fi
	__Ltemp=(`checkRun "adb devices"`)
    __LdeviceID=${__Ltemp[4]}
    if [ x$__LdeviceID = x ]
	then
		ERROR "Can not find any device available!"
		abandon 1
	fi
    # TODO: Support selection of devices
	WARNTL "-- Set device ID to: $__LdeviceID"
    __LadbShell="adb -s $__LdeviceID shell "
    __GadbGetScreenSize
	returnArgs $__LdeviceID
}

__GadbGetScreenSize(){
	setArgs $*
	checkArgs '$# = 0' "Too many arguments"
	if [ x$__LscreenX = x ]
    then
		if [ x$__LdeviceID = x ]
		then
			ERROR "Can not run adb functions with no device initiated!"
			abandon 1
		fi
		__Ltemp=(`checkRun $__LadbShell wm size`)
		__LscreenSize=(`echo ${__Ltemp[2]} | sed 's/x/ /'`)
		__LscreenX=${__LscreenSize[0]}
		__LscreenY=${__LscreenSize[1]}
    	WARNTL "-- Set device's screen size to: $__LscreenX x $__LscreenY"
	fi
	returnArgs $__LscreenX $__LscreenY
}

__GadbTapScreen(){
	setArgs $*
	checkArgs '$# = 2' "Too many or too few arguments"
	checkArgs '`isAllNumber $*` = 1' "Not a normal number"
	checkArgs '$1 -ge 0 -a $2 -ge 0' "Out of range [$__LscreenX, $__LscreenY]"
    checkArgs '$1 -lt $__LscreenX -a $2 -lt $__LscreenY' "Out of range"
	if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	echo ">> Tap screen at coordinate [$1, $2]"
	checkRun $__LadbShell input tap $1 $2
}

__GadbLongTapScreen(){
	setArgs $*
	checkArgs '$# = 3' "Too many or too few arguments"
	checkArgs '`isAllNumber $*` = 1' "Not a normal number"
	checkArgs '$1 -ge 0 -a $2 -ge 0' "Out of range [$__LscreenX, $__LscreenY]"
    checkArgs '$1 -lt $__LscreenX -a $2 -lt $__LscreenY' "Out of range"
	if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	echo ">> Tap screen at coordinate [$1, $2] for ${2}ms"
    __LadbSwipeScreen $1 $2 $1 $2 $3
}

__GadbSwipeScreen(){
	setArgs $*
	checkArgs '$# = 4 -o $# = 5' "Too many or too few arguments"
	checkArgs '`isAllNumber $*` = 1' "Not a normal number"
	checkArgs '$1 -ge 0 -a $2 -ge 0' "Out of range [$__LscreenX, $__LscreenY]"
    checkArgs '$1 -lt $__LscreenX -a $2 -lt $__LscreenY' "Out of range [$__LscreenX, $__LscreenY]"
	checkArgs '$3 -ge 0 -a $4 -ge 0' "Out of range [$__LscreenX, $__LscreenY]"
    checkArgs '$3 -lt $__LscreenX -a $4 -lt $__LscreenY' "Out of range [$__LscreenX, $__LscreenY]"
	if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	if [ x$5 = x ]
	then echo ">> Swipe screen from [$1, $2] to [$3, $4]"
	else echo ">> Swipe screen from [$1, $2] to [$3, $4] in ${5}ms"
	fi
	__LadbSwipeScreen $*
}

__LadbSwipeScreen(){
	checkRun $__LadbShell input swipe $*
}

__GadbPressKey(){
	setArgs $*
	checkArgs '$# = 1' "Too many or too few arguments"
    if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	__Lindex=0
	while [ x${__LkeyNameList[$__Lindex]} != x ]
	do
		if [ ${__LkeyNameList[$__Lindex]} = $1 ]
		then
			echo ">> Press key \"$1(${__LkeyValList[$__Lindex]})\""
			checkRun $__LadbShell input keyevent ${__LkeyValList[$__Lindex]}
			return
		else __Lindex=$[__Lindex + 1]
		fi
	done
	ERROR "Can not find the Key named as \"$1\""
	abandon 1
}

__GadbLongPressKey(){
	setArgs $*
	checkArgs '$# = 2' "Too many or too few arguments"
	checkArgs '`isNumber $2` = 1' "Not a number"
	if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	__Lindex=0
	while [ x${__LkeyEventNameList[$__Lindex]} != x ]
	do
		if [ ${__LkeyEventNameList[$__Lindex]} = $1 ]
		then
            __Ltime=$[$2 / 1000]
            if [ $__Ltime = 0 ]
            then __Ltime=1
            fi
			echo ">> Long Press key \"$1(${__LkeyEventValList[$__Lindex]})\" for ${__Ltime}ms"
            checkRun $__LadbShell sendevent \
                    /dev/input/event${__LkeyEventIDList[$__Lindex]} \
                    1 ${__LkeyEventValList[$__Lindex]} 1
            checkRun $__LadbShell sendevent \
                    /dev/input/event${__LkeyEventIDList[$__Lindex]} 0 0 0
            sleep $__Ltime
            checkRun $__LadbShell sendevent \
                    /dev/input/event${__LkeyEventIDList[$__Lindex]} \
                    1 ${__LkeyEventValList[$__Lindex]} 0
            checkRun $__LadbShell sendevent \
                    /dev/input/event${__LkeyEventIDList[$__Lindex]} 0 0 0
			return
		else __Lindex=$[__Lindex + 1]
		fi
	done
	ERROR "Can not find the Key named as \"$1\""
	abandon 1
}

__GadbInputText(){
	setArgs $*
	checkArgs '$# -le 1' "Too many arguments"
    if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	if [ $# != 1 ]
	then
		if [ x"cat" = x ]
		then
			echo ">> Input text \"`cat`\""
			checkRun $__LadbShell input text "`cat`"
		else
			ERROR "Can not find given input text"
			abandon 1
		fi
	else
		echo ">> Input text \"$1\""
		checkRun $__LadbShell input text $1
	fi
}

__GadbStartApp(){
	setArgs $*
	checkArgs '$# = 1' "Too many or too few arguents"
    if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	RUNMSGL ">> Start app [$1]"
	checkRun $__LadbShell am start -n $1
}

__GadbGetBatteryLevel(){
	setArgs $*
	checkArgs '$# = 0' "Too many arguments"
    if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	__LbatteryLevel=$(checkRun $__LadbShell dumpsys battery | awk '/level:/ {print $2}')
	WARNTL "-- Get device battery level $__LbatteryLevel%"
	returnArgs $__LbatteryLevel
}

__GadbCaptureScreen(){
	setArgs $*
	checkArgs '$# = 1' "Too many or too few arguments"
    if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	echo ">> Capture screen and save to $1"
	checkRun $__LadbShell screencap -p $1
}

__GadbDownloadFile(){
	setArgs $*
	checkArgs '$# = 2' "Too many or to few arguments"
	checkArgs '-d `dirname $2`' "No such directory"
    if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	echo ">> Download file \"$1\" from device to \"$2\""
	checkRun $__LadbShell pull $1 $2
}

__GadbUploadFile(){
	setArgs $*
	checkArgs '$# = 2' "Too many or too few arguments"
	checkArgs '-f $1' "No such file"
    if [ x$__LdeviceID = x ]
	then
		ERROR "Can not run adb functions with no device initiated!"
		abandon 1
	fi
	echo ">> Upload file \"$1\" to device \"$2\""
	checkRun $__LadbShell push $1 $2
}
